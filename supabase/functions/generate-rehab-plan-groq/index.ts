
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";
import { supabaseClient } from "../_shared/supabase-client.ts";

const GROQ_API_KEY = Deno.env.get("GROQ_API_KEY");
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Generate Rehab Plan Groq Function - Request received");
    
    // Parse request data
    const { preferences, userId } = await req.json();
    console.log("User ID:", userId);
    console.log("Preferences received:", JSON.stringify(preferences));
    
    // Validate required fields
    if (!preferences || !userId) {
      console.error("Missing required fields: preferences or userId");
      return new Response(
        JSON.stringify({ error: "Missing required fields", success: false }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    if (!GROQ_API_KEY) {
      console.error("GROQ_API_KEY is not configured");
      return new Response(
        JSON.stringify({ error: "API configuration error", success: false }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Create rehabilitation plan JSON structure
    console.log("Creating rehabilitation plan");
    
    // Format the prompt for the Groq API
    const prompt = createRehabPlanPrompt(preferences);
    console.log("Sending request to Groq API with model: llama3-70b-8192");
    
    try {
      // Make request to Groq API
      const response = await fetch(GROQ_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${GROQ_API_KEY}`
        },
        body: JSON.stringify({
          model: "llama3-70b-8192",
          messages: [
            {
              role: "system",
              content: "You are a professional physiotherapist who creates detailed rehabilitation plans. Your task is to generate a valid and complete JSON rehabilitation plan. DO NOT include placeholders or '...and so on' text in your response. Generate a complete, valid JSON object for all days specified."
            },
            { role: "user", content: prompt }
          ],
          temperature: 0.5,
          max_tokens: 4000,
          response_format: { type: "json_object" }
        })
      });

      console.log("Groq API response status:", response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Groq API Error (${response.status}):`, errorText);
        throw new Error(`Groq API request failed with status ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      console.log("Groq API response received");

      if (!result.choices || result.choices.length === 0) {
        console.error("Groq API returned empty choices array:", JSON.stringify(result));
        throw new Error("No content generated by Groq API");
      }

      // Process the response
      let rehabPlan;
      try {
        const content = result.choices[0].message.content;
        console.log("Raw content from Groq API:", content);
        rehabPlan = typeof content === 'string' ? JSON.parse(content) : content;
        console.log("Rehab plan processed successfully");
      } catch (parseError) {
        console.error("Error parsing Groq API response:", parseError);
        console.error("Raw content causing parse error:", result.choices[0].message.content);
        throw new Error("Failed to parse rehabilitation plan from Groq API response");
      }

      // Now, store the plan in the database
      console.log("Storing rehab plan in database");
      
      // Calculate start and end dates (4 weeks plan)
      const startDate = new Date();
      const endDate = new Date();
      endDate.setDate(endDate.getDate() + 28); // 4 weeks from now
      
      const planData = {
        user_id: userId,
        goal: preferences.goal || "Rehabilitation",
        condition: preferences.condition,
        start_date: startDate.toISOString(),
        end_date: endDate.toISOString(),
        plan_data: rehabPlan
      };
      
      // Insert the rehab plan into the database
      const { data: insertedPlan, error: insertError } = await supabaseClient
        .from('rehab_plans')
        .insert(planData)
        .select()
        .single();
        
      if (insertError) {
        console.error("Error saving rehab plan to database:", insertError);
        throw new Error(`Failed to save rehab plan: ${insertError.message}`);
      }
      
      console.log("Rehab plan saved to database successfully");
      
      // Increment the user's rehab plan generation count
      try {
        const { data: countData, error: countError } = await supabaseClient
          .from('plan_generation_counts')
          .select('rehabilitation_count')
          .eq('user_id', userId)
          .maybeSingle();
          
        if (countError) {
          console.warn("Error fetching rehabilitation count:", countError);
        }
        
        const currentCount = countData?.rehabilitation_count || 0;
        const newCount = currentCount + 1;
        
        const { error: updateError } = await supabaseClient
          .from('plan_generation_counts')
          .upsert({
            user_id: userId,
            rehabilitation_count: newCount,
            updated_at: new Date().toISOString()
          });
          
        if (updateError) {
          console.warn("Error updating rehabilitation count:", updateError);
        } else {
          console.log(`Updated rehabilitation count to ${newCount}`);
        }
      } catch (countUpdateError) {
        console.warn("Error in count update process:", countUpdateError);
      }
      
      // Return the generated plan
      return new Response(
        JSON.stringify(rehabPlan),
        { 
          headers: { 
            ...corsHeaders, 
            "Content-Type": "application/json" 
          } 
        }
      );
    } catch (apiError) {
      console.error("Error during Groq API call:", apiError);
      return new Response(
        JSON.stringify({
          error: `Error during Groq API call: ${apiError.message}`,
          success: false,
        }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" }
        }
      );
    }
  } catch (error) {
    console.error("Error in generate-rehab-plan-groq:", error);
    return new Response(
      JSON.stringify({
        error: error.message || "An error occurred while generating the rehab plan",
        success: false,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});

function createRehabPlanPrompt(preferences) {
  return `
Create a detailed 4-week rehabilitation plan for a patient with the following information:

PATIENT INFORMATION:
- Age: ${preferences.age} years
- Weight: ${preferences.weight} kg
- Height: ${preferences.height} cm
- Gender: ${preferences.gender}
- Joint Area Affected: ${preferences.joint_area}
- Condition: ${preferences.condition}
- Pain Level (0-10): ${preferences.pain_level}
- Mobility Level: ${preferences.mobility_level}
- Previous Treatment: ${preferences.previous_treatment ? "Yes" : "No"}
- Activity Level: ${preferences.activity_level}
- Pain Location: ${preferences.painLocation || "Not specified"}

INJURY DETAILS:
- Injury Description: ${preferences.injuryDescription || "General discomfort in the affected area"}
- Injury Duration: ${preferences.injuryDuration || "Recent"}
- Previous Treatments: ${preferences.previousTreatments || "None specified"}
- Exercise Experience: ${preferences.exerciseExperience || "Moderate"}

INSTRUCTIONS:
1. Create a comprehensive rehabilitation plan covering 4 weeks (28 days) with progressive exercises.
2. Each day should include warm-up activities, specific rehabilitation exercises, and cool-down routines.
3. Include detailed information about exercise repetitions, sets, and rest periods.
4. Provide general health recommendations and dietary advice to support recovery.
5. Important: Due to message size limitations, only create a plan for days 1, 7, 14, 21, and 28 as representative days for each week.
6. Format your response as a valid JSON object with the following structure:

{
  "overview": "A brief overview of the condition and the rehabilitation approach",
  "recommendations": ["array", "of", "general", "recommendations"],
  "days": {
    "day1": {
      "notes": "Day-specific instructions or focus",
      "exercises": [
        {
          "title": "Warm-up",
          "exercises": [
            {"name": "Exercise name", "sets": 3, "reps": 10, "restTime": "30 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        },
        {
          "title": "Main Session",
          "exercises": [
            {"name": "Exercise name", "sets": 3, "reps": 10, "restTime": "60 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        },
        {
          "title": "Cool-down",
          "exercises": [
            {"name": "Exercise name", "sets": 1, "reps": 3, "restTime": "30 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        }
      ],
      "nutrition": {
        "breakfast": {
          "foods": [{"name": "food name", "portion": 100, "unit": "g", "details": "optional description"}],
          "calories": 500,
          "macros": {"protein": 20, "carbs": 60, "fats": 15, "fiber": 5}
        },
        "morningSnack": {...},
        "lunch": {...},
        "afternoonSnack": {...},
        "dinner": {...}
      }
    },
    "day7": {...},
    "day14": {...},
    "day21": {...},
    "day28": {...}
  }
}

IMPORTANT REQUIREMENTS:
1. Only generate the days specified (days 1, 7, 14, 21, and 28). Do not include placeholder text or "...and so on" in your JSON.
2. Make sure your response is a complete, valid JSON object with no placeholders or ellipsis.
3. Each day should have unique and progressive exercises suitable for the recovery stage.
4. All nutrition sections should include complete details for all meals.

Por favor, crie um plano de reabilitação personalizado em português do Brasil (Brazilian Portuguese).
`;
}
