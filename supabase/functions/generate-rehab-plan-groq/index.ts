
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";

const GROQ_API_KEY = Deno.env.get("GROQ_API_KEY");
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Generate Rehab Plan Groq Function - Request received");
    
    // Parse request data
    const { preferences, userId } = await req.json();
    console.log("User ID:", userId);
    console.log("Preferences received:", JSON.stringify(preferences));
    
    // Validate required fields
    if (!preferences || !userId) {
      console.error("Missing required fields: preferences or userId");
      return new Response(
        JSON.stringify({ error: "Missing required fields" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    if (!GROQ_API_KEY) {
      console.error("GROQ_API_KEY is not configured");
      return new Response(
        JSON.stringify({ error: "API configuration error" }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Create rehabilitation plan JSON structure
    console.log("Creating rehabilitation plan");
    
    // Format the prompt for the Groq API
    const prompt = createRehabPlanPrompt(preferences);
    
    // Make request to Groq API
    const response = await fetch(GROQ_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${GROQ_API_KEY}`
      },
      body: JSON.stringify({
        model: "llama3-70b-8192",
        messages: [
          {
            role: "system",
            content: "You are a professional physiotherapist who creates detailed rehabilitation plans."
          },
          { role: "user", content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        response_format: { type: "json_object" }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Groq API Error (${response.status}):`, errorText);
      throw new Error(`Groq API request failed with status ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log("Groq API response received");

    if (!result.choices || result.choices.length === 0) {
      console.error("Groq API returned empty choices array:", result);
      throw new Error("No content generated by Groq API");
    }

    // Process the response
    let rehabPlan;
    try {
      const content = result.choices[0].message.content;
      rehabPlan = typeof content === 'string' ? JSON.parse(content) : content;
      console.log("Rehab plan processed successfully");
    } catch (parseError) {
      console.error("Error parsing Groq API response:", parseError);
      throw new Error("Failed to parse rehabilitation plan from Groq API response");
    }

    // Now, store the plan in the database
    const { supabaseClient } = await import("../_shared/supabase-client.ts");
    
    // Calculate start and end dates (4 weeks plan)
    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + 28); // 4 weeks from now
    
    const planData = {
      user_id: userId,
      goal: preferences.goal || "Rehabilitation",
      condition: preferences.condition,
      start_date: startDate.toISOString(),
      end_date: endDate.toISOString(),
      plan_data: rehabPlan
    };
    
    // Insert the rehab plan into the database
    const { data: insertedPlan, error: insertError } = await supabaseClient
      .from('rehab_plans')
      .insert(planData)
      .select()
      .single();
      
    if (insertError) {
      console.error("Error saving rehab plan to database:", insertError);
      throw new Error(`Failed to save rehab plan: ${insertError.message}`);
    }
    
    console.log("Rehab plan saved to database successfully");
    
    // Return the generated plan
    return new Response(
      JSON.stringify(rehabPlan),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error in generate-rehab-plan-groq:", error);
    return new Response(
      JSON.stringify({
        error: error.message || "An error occurred while generating the rehab plan",
        success: false,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});

function createRehabPlanPrompt(preferences) {
  return `
Create a detailed 4-week rehabilitation plan for a patient with the following information:

PATIENT INFORMATION:
- Age: ${preferences.age} years
- Weight: ${preferences.weight} kg
- Height: ${preferences.height} cm
- Gender: ${preferences.gender}
- Joint Area Affected: ${preferences.joint_area}
- Condition: ${preferences.condition}
- Pain Level (0-10): ${preferences.pain_level}
- Mobility Level: ${preferences.mobility_level}
- Previous Treatment: ${preferences.previous_treatment ? "Yes" : "No"}
- Activity Level: ${preferences.activity_level}
- Pain Location: ${preferences.painLocation || "Not specified"}

INJURY DETAILS:
- Injury Description: ${preferences.injuryDescription}
- Injury Duration: ${preferences.injuryDuration}
- Previous Treatments: ${preferences.previousTreatments}
- Exercise Experience: ${preferences.exerciseExperience}

INSTRUCTIONS:
1. Create a comprehensive rehabilitation plan covering 4 weeks (28 days) with progressive exercises.
2. Each day should include warm-up activities, specific rehabilitation exercises, and cool-down routines.
3. Include detailed information about exercise repetitions, sets, and rest periods.
4. Provide general health recommendations and dietary advice to support recovery.
5. Format your response as a valid JSON object with the following structure:

{
  "overview": "A brief overview of the condition and the rehabilitation approach",
  "recommendations": ["array", "of", "general", "recommendations"],
  "days": {
    "day1": {
      "notes": "Day-specific instructions or focus",
      "exercises": [
        {
          "title": "Warm-up",
          "exercises": [
            {"name": "Exercise name", "sets": 3, "reps": 10, "restTime": "30 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        },
        {
          "title": "Main Session",
          "exercises": [
            {"name": "Exercise name", "sets": 3, "reps": 10, "restTime": "60 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        },
        {
          "title": "Cool-down",
          "exercises": [
            {"name": "Exercise name", "sets": 1, "reps": 3, "restTime": "30 seconds", "description": "Exercise description"}
          ],
          "notes": "Any additional notes for this section"
        }
      ],
      "nutrition": {
        "breakfast": {
          "foods": [{"name": "food name", "portion": 100, "unit": "g", "details": "optional description"}],
          "calories": 500,
          "macros": {"protein": 20, "carbs": 60, "fats": 15, "fiber": 5}
        },
        "morningSnack": {...},
        "lunch": {...},
        "afternoonSnack": {...},
        "dinner": {...}
      }
    },
    "day2": {...},
    ...and so on for days 1-28
  }
}

Por favor, crie um plano de reabilitação personalizado em português do Brasil (Brazilian Portuguese).
`;
}
