
import { serve } from "std/server";
import xhr from "xhr";
import { createClient } from "@supabase/supabase-js";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const AIML_API_KEY = "a5463eee746b41b8b267b7492648a9f3";
const SUPABASE_URL = Deno.env.get("SUPABASE_URL") || "";
const SUPABASE_ANON_KEY = Deno.env.get("SUPABASE_ANON_KEY") || "";
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    console.log("Handling CORS preflight request");
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Received request to generate-meal-plan-llama");
    const requestData = await req.json();
    
    console.log("Request data:", JSON.stringify(requestData, null, 2));
    const { userData, selectedFoods, dietaryPreferences, modelConfig } = requestData;
    
    if (!userData || !selectedFoods) {
      console.error("Missing required data in request");
      return new Response(
        JSON.stringify({ error: "Missing required userData or selectedFoods" }),
        { 
          status: 400, 
          headers: { ...corsHeaders, "Content-Type": "application/json" } 
        }
      );
    }

    console.log(`Generating meal plan for user ${userData.userId} with ${selectedFoods.length} foods`);
    console.log(`Dietary preferences:`, JSON.stringify(dietaryPreferences, null, 2));
    
    // Create a system prompt that guides the AI to generate a well-structured meal plan
    const systemPrompt = createSystemPrompt(userData, dietaryPreferences);
    
    // Create a user prompt with the specific foods and requirements
    const userPrompt = createUserPrompt(userData, selectedFoods, dietaryPreferences);
    
    console.log("Calling AIML API with model: NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO");
    
    // Call the AIML API
    const response = await fetch("https://api.aimlapi.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${AIML_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        top_p: 0.95,
        stream: false,
        response_format: { type: "json_object" }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`AIML API error (${response.status}):`, errorText);
      throw new Error(`AIML API returned error ${response.status}: ${errorText}`);
    }

    const responseData = await response.json();
    console.log("AIML API response received");
    
    // Extract the generated content
    const generatedContent = responseData.choices?.[0]?.message?.content;
    
    if (!generatedContent) {
      console.error("No content generated by AIML API:", JSON.stringify(responseData, null, 2));
      throw new Error("No content in AIML API response");
    }
    
    console.log("Parsing generated content as JSON");
    let mealPlanData;
    
    try {
      // Try to parse the generated content as JSON
      if (typeof generatedContent === 'string') {
        // Look for JSON object in the response
        const jsonMatch = generatedContent.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          mealPlanData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error("Could not find valid JSON in response");
        }
      } else if (typeof generatedContent === 'object') {
        // Response already parsed as object
        mealPlanData = generatedContent;
      }
    } catch (parseError) {
      console.error("Error parsing meal plan JSON:", parseError);
      console.log("Raw content received:", generatedContent);
      throw new Error(`Failed to parse meal plan data: ${parseError.message}`);
    }
    
    if (!mealPlanData || !mealPlanData.weeklyPlan) {
      console.error("Invalid meal plan structure:", JSON.stringify(mealPlanData, null, 2));
      throw new Error("Generated meal plan is missing required structure");
    }
    
    // Add metadata to the meal plan
    mealPlanData.userId = userData.userId;
    mealPlanData.generatedAt = new Date().toISOString();
    mealPlanData.userCalories = userData.dailyCalories;
    
    console.log("Successfully generated meal plan with structure:", Object.keys(mealPlanData).join(", "));
    
    // Save the meal plan to the database if userId is provided
    if (userData.userId) {
      try {
        console.log("Saving meal plan to database for user:", userData.userId);
        const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
        
        const { data, error } = await supabase
          .from("meal_plans")
          .insert({
            user_id: userData.userId,
            plan_data: mealPlanData,
            daily_calories: userData.dailyCalories,
            dietary_preferences: dietaryPreferences,
            created_at: new Date().toISOString()
          });
          
        if (error) {
          console.error("Error saving meal plan to database:", error);
          // Continue even if save fails
        } else {
          console.log("Meal plan successfully saved to database");
        }
      } catch (dbError) {
        console.error("Database error:", dbError);
        // Continue even if save fails
      }
    }

    return new Response(
      JSON.stringify({ mealPlan: mealPlanData }),
      { 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  } catch (error) {
    console.error("Error in generate-meal-plan-llama:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "An error occurred while generating the meal plan",
        errorDetails: error.toString() 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, "Content-Type": "application/json" } 
      }
    );
  }
});

// Helper function to create the system prompt
function createSystemPrompt(userData: any, dietaryPreferences: any) {
  return `You are a professional nutritionist specialized in creating personalized meal plans. 
Your task is to create a complete weekly meal plan in JSON format based on the user's nutritional needs and food preferences.

Output MUST include:
1. A "weeklyPlan" object with days of the week (monday through sunday)
2. Each day must have "meals" containing breakfast, morningSnack, lunch, afternoonSnack, and dinner
3. Each meal must include:
   - foods: array of food items with name, portion, unit, and details
   - calories: total calories for the meal
   - macros: object with protein, carbs, fats, fiber in grams
   - description: brief description of the meal
4. Each day must include "dailyTotals" with total calories, protein, carbs, fats, fiber
5. A "weeklyTotals" object with averageCalories, averageProtein, averageCarbs, averageFats, averageFiber
6. A "recommendations" array with dietary and nutrition advice

Ensure the meal plan:
- Targets ${userData.dailyCalories} daily calories
- Aligns with the goal: ${userData.goal}
- Respects any dietary restrictions or allergies
- Uses only the provided food items, adjusting portions to meet caloric goals
- Distributes macronutrients appropriately throughout the day
- Provides nutritionally balanced meals with adequate protein, carbs, fats, and fiber

You MUST respond ONLY with a valid JSON object containing the meal plan.`;
}

// Helper function to create the user prompt with detailed food information
function createUserPrompt(userData: any, selectedFoods: any[], dietaryPreferences: any) {
  // Organize foods by category for better prompt structure
  const foodsByCategory: Record<string, any[]> = {};
  
  selectedFoods.forEach(food => {
    const category = food.food_group_id ? 
      getCategoryFromFoodGroupId(food.food_group_id) : 
      "other";
    
    if (!foodsByCategory[category]) {
      foodsByCategory[category] = [];
    }
    
    foodsByCategory[category].push(food);
  });
  
  // Format information about the user
  const userInfo = `
User Information:
- Daily calorie target: ${userData.dailyCalories} calories
- Weight: ${userData.weight} kg
- Height: ${userData.height} cm
- Age: ${userData.age} years
- Gender: ${userData.gender}
- Activity level: ${userData.activityLevel}
- Goal: ${userData.goal}
`;

  // Format dietary preferences
  const allergiesInfo = dietaryPreferences.hasAllergies && dietaryPreferences.allergies?.length > 0 ?
    `The user has allergies to: ${dietaryPreferences.allergies.join(", ")}.` :
    "The user has no allergies.";
    
  const dietaryRestrictionsInfo = dietaryPreferences.dietaryRestrictions?.length > 0 ?
    `The user has these dietary restrictions: ${dietaryPreferences.dietaryRestrictions.join(", ")}.` :
    "The user has no specific dietary restrictions.";
    
  const trainingTimeInfo = dietaryPreferences.trainingTime ?
    `The user usually trains at: ${dietaryPreferences.trainingTime}.` :
    "No specific training time provided.";

  // Format the foods available
  let foodsList = "Available Foods:\n";
  
  Object.entries(foodsByCategory).forEach(([category, foods]) => {
    foodsList += `\n${category.toUpperCase()} foods:\n`;
    
    foods.forEach(food => {
      foodsList += `- ${food.name}: ${food.calories} calories per ${food.portion || 100}${food.portionUnit || 'g'}, ` +
        `Protein: ${food.protein || 0}g, Carbs: ${food.carbs || 0}g, Fats: ${food.fats || 0}g, Fiber: ${food.fiber || 0}g\n`;
    });
  });

  return `${userInfo}

${allergiesInfo}
${dietaryRestrictionsInfo}
${trainingTimeInfo}

${foodsList}

Create a complete 7-day meal plan using only these foods, adjusting portions as needed to meet the daily calorie target of ${userData.dailyCalories} calories.
Ensure the meal plan is suitable for the user's goal of "${userData.goal}" and respects any allergies or dietary restrictions.

For each day, include 5 meals: breakfast, morning snack, lunch, afternoon snack, and dinner.
For each meal, specify the foods, portions, macronutrients, and total calories.
Calculate daily totals for calories and macronutrients.
Include weekly averages for calories and macronutrients.
Provide nutritional recommendations based on the user's profile.

Respond ONLY with a valid JSON object.`;
}

// Helper function to get category name from food group ID
function getCategoryFromFoodGroupId(foodGroupId: number): string {
  const categories: Record<number, string> = {
    1: "breakfast",
    2: "lunch",
    3: "snack",
    4: "dinner",
    5: "fruit",
    6: "vegetable",
    7: "protein",
    8: "grain",
    9: "dairy"
  };
  
  return categories[foodGroupId] || "other";
}
