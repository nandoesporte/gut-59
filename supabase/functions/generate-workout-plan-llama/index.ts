
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1";

const LLAMA_API_KEY = Deno.env.get("LLAMA_API_KEY");

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log("Workout Plan Generation Function - Request received");

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { preferences, userId, settings } = await req.json();
    
    console.log("Fetching exercises from database...");
    
    // Validate input
    if (!preferences) {
      throw new Error("No workout preferences provided");
    }
    
    if (!userId) {
      throw new Error("No user ID provided");
    }
    
    if (!LLAMA_API_KEY) {
      console.error("LLAMA_API_KEY not found in environment variables");
      throw new Error("LlamaAPI key not configured");
    }
    
    // Create Supabase client
    const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Fetch exercises from the database
    const { data: exercises, error: exercisesError } = await supabase
      .from('exercises')
      .select('*');
      
    if (exercisesError) {
      console.error("Error fetching exercises:", exercisesError);
      throw new Error(`Error fetching exercises: ${exercisesError.message}`);
    }
    
    if (!exercises || exercises.length === 0) {
      console.error("No exercises found in database");
      throw new Error("No exercises found in database");
    }
    
    console.log(`Found ${exercises.length} exercises in database`);
    
    // Build the prompt for workout plan generation
    const systemPrompt = `You are an expert fitness coach specializing in creating custom workout plans for clients.
Your task is to create a balanced 7-day workout plan based on the user's specific information and preferences.`;

    const userPrompt = buildWorkoutPrompt(preferences, exercises);
    
    console.log("Sending request to LlamaAPI...");
    
    // Make request to LlamaAPI
    const response = await fetch("https://api.llama-api.com/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${LLAMA_API_KEY}`
      },
      body: JSON.stringify({
        model: settings?.model_id || "nous-hermes-2-mixtral-8x7b-dpo", // Use settings if available, otherwise fallback
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        response_format: { type: "json_object" }
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`LlamaAPI Error (${response.status}):`, errorText);
      throw new Error(`LlamaAPI request failed with status ${response.status}`);
    }
    
    const result = await response.json();
    console.log("LlamaAPI response received");
    
    if (!result.choices || result.choices.length === 0) {
      console.error("LlamaAPI returned empty choices array");
      throw new Error("No content generated by LlamaAPI");
    }
    
    let workoutPlan;
    try {
      // Extract and parse the workout plan JSON
      const content = result.choices[0].message.content;
      workoutPlan = typeof content === 'string' ? JSON.parse(content) : content;
      
      // Process the workout plan to match exercises from our database
      const processedPlan = processWorkoutPlan(workoutPlan, exercises);
      console.log("Workout plan processed successfully");
      
      return new Response(JSON.stringify({ workoutPlan: processedPlan }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    } catch (parseError) {
      console.error("Error parsing LlamaAPI response:", parseError);
      console.error("Raw response:", result.choices[0].message.content);
      throw new Error("Failed to parse workout plan from LlamaAPI response");
    }
  } catch (error) {
    console.error("Error in generate-workout-plan-llama:", error);
    return new Response(
      JSON.stringify({
        error: error.message || "An error occurred while generating the workout plan",
        success: false,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});

function buildWorkoutPrompt(preferences, exercises) {
  // Extract available exercise types for better recommendations
  const exerciseTypes = [...new Set(exercises.map(e => e.exercise_type))].join(", ");
  const muscleGroups = [...new Set(exercises.map(e => e.muscle_group))].join(", ");
  
  return `
Please create a comprehensive 7-day workout plan based on the following user information:

USER INFORMATION:
- Age: ${preferences.age} years
- Weight: ${preferences.weight} kg
- Height: ${preferences.height} cm
- Gender: ${preferences.gender}
- Fitness Goal: ${preferences.goal.replace('_', ' ')}
- Activity Level: ${preferences.activity_level}
- Preferred Exercise Types: ${preferences.preferred_exercise_types.join(', ')}
- Available Equipment: ${preferences.available_equipment.join(', ')}
${preferences.health_conditions ? `- Health Conditions: ${preferences.health_conditions.join(', ')}` : '- No health conditions'}

INSTRUCTIONS:
1. Create a 7-day workout plan with one session per day.
2. Each day should focus on different muscle groups for balanced training.
3. Each session should include:
   - A 5-minute warm-up description
   - 3-6 exercises from our database
   - A 5-minute cooldown description
4. For each exercise specify:
   - Number of sets (2-5)
   - Number of reps (8-20, depending on exercise type)
   - Rest time between sets in seconds (30-120)

AVAILABLE EXERCISE TYPES: ${exerciseTypes}
AVAILABLE MUSCLE GROUPS: ${muscleGroups}

FORMAT YOUR RESPONSE AS A VALID JSON OBJECT with the following structure:
{
  "goal": "user's goal (lose_weight, maintain, or gain_mass)",
  "workout_sessions": [
    {
      "day_number": 1,
      "warmup_description": "detailed warmup instructions",
      "cooldown_description": "detailed cooldown instructions",
      "session_exercises": [
        {
          "exercise_name": "name of exercise from our database",
          "muscle_group": "target muscle group",
          "sets": number of sets (integer),
          "reps": number of reps per set (integer),
          "rest_time_seconds": rest time in seconds (integer)
        },
        ...more exercises
      ]
    },
    ...more days
  ]
}

IMPORTANT: Only include exercises from the available types and muscle groups mentioned above.
Create a balanced workout plan that addresses all major muscle groups throughout the week.
`;
}

function processWorkoutPlan(workoutPlan, exercises) {
  // Make sure we have the expected format
  if (!workoutPlan || !workoutPlan.workout_sessions) {
    console.error("Invalid workout plan format", workoutPlan);
    throw new Error("Invalid workout plan format");
  }
  
  // Process each session
  workoutPlan.workout_sessions = workoutPlan.workout_sessions.map(session => {
    if (!session.session_exercises) {
      session.session_exercises = [];
      return session;
    }
    
    // Process each exercise in the session
    session.session_exercises = session.session_exercises.map(sessionExercise => {
      // Find matching exercise in our database
      const exerciseName = sessionExercise.exercise_name.toLowerCase();
      const targetMuscleGroup = sessionExercise.muscle_group?.toLowerCase();
      
      // Try to match by name and muscle group if available
      let matchedExercise = exercises.find(e => 
        e.name.toLowerCase() === exerciseName && 
        (!targetMuscleGroup || e.muscle_group?.toLowerCase() === targetMuscleGroup)
      );
      
      // If no exact match, try to find by name only
      if (!matchedExercise) {
        matchedExercise = exercises.find(e => 
          e.name.toLowerCase() === exerciseName
        );
      }
      
      // If still no match, try fuzzy matching by seeing if the name contains the exercise name
      if (!matchedExercise) {
        matchedExercise = exercises.find(e => 
          e.name.toLowerCase().includes(exerciseName) || 
          exerciseName.includes(e.name.toLowerCase())
        );
      }
      
      // If still no match, try to find an exercise with the same muscle group
      if (!matchedExercise && targetMuscleGroup) {
        const muscleGroupExercises = exercises.filter(e => 
          e.muscle_group?.toLowerCase() === targetMuscleGroup
        );
        
        if (muscleGroupExercises.length > 0) {
          // Select a random exercise from this muscle group
          matchedExercise = muscleGroupExercises[Math.floor(Math.random() * muscleGroupExercises.length)];
          console.log(`No exact match for "${exerciseName}". Using alternative: "${matchedExercise.name}"`);
        }
      }
      
      // If we still don't have a match, just pick a random exercise
      if (!matchedExercise) {
        matchedExercise = exercises[Math.floor(Math.random() * exercises.length)];
        console.log(`No match for "${exerciseName}". Using random exercise: "${matchedExercise.name}"`);
      }
      
      // Map to the expected format
      return {
        sets: sessionExercise.sets || 3,
        reps: sessionExercise.reps || 10,
        rest_time_seconds: sessionExercise.rest_time_seconds || 60,
        exercise: {
          id: matchedExercise.id,
          name: matchedExercise.name,
          description: matchedExercise.description,
          gif_url: matchedExercise.gif_url,
          muscle_group: matchedExercise.muscle_group,
          exercise_type: matchedExercise.exercise_type
        }
      };
    });
    
    return session;
  });
  
  return workoutPlan;
}
